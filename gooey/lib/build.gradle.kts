/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    java
    id("maven-publish")
    signing
}

repositories {
    mavenCentral()
}

dependencies {
    implementation ( "org.junit.jupiter:junit-jupiter:5.12.0" )     // 5.12.x https://junit.org/junit5/
    testRuntimeOnly( "org.junit.platform:junit-platform-launcher" ) // 5.12.0 test discovery https://github.com/gradle/gradle/issues/32534

    implementation( "org.awaitility:awaitility:4.2.0" )
    implementation( "com.google.truth:truth:1.4.4" )                    // 1.4.4  https://truth.dev/
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

group = "edu.cnu.cs"
version = "1.0.21.05"

tasks.jar {
    description = "Task to build Gooey's JAR distribution"
    manifest {
        attributes(mapOf(
            "Implementation-Title" to project.name,
            "Implementation-Version" to project.version,
            "Built-By" to System.getProperty("user.name"),
            "Built-JDK" to System.getProperty("java.version"),
            "Build-Time" to DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                                             .format( LocalDateTime.now() )
        ))
    }
}

// Create additional artifacts for sources and Javadoc
val jarSources by tasks.registering(Jar::class) {
    archiveClassifier.set("sources")
    from(sourceSets["main"].allSource)
}

val jarJavadoc by tasks.registering(Jar::class) {
    archiveClassifier.set("javadoc")
    from(tasks.javadoc)
}

// Configure the publication using maven-publish
publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            // Publish the main Java component (and any additional artifacts)
            from(components["java"])
            artifact(jarSources.get())
            artifact(jarJavadoc.get())

            // Configure the POM
            pom {
                name.set("Gooey")
                description.set("Gooey is a lean jUnit testing library for Java Swing applications.")
                url.set("https://github.com/robertoaflores/Gooey/")
                licenses {
                    license {
                        name.set("The MIT License")
                        url.set("http://opensource.org/licenses/MIT")
                        distribution.set("repo")
                    }
                }
                scm {
                    connection.set("scm:git@github.com:robertoaflores/Gooey.git")
                    developerConnection.set("scm:git@github.com:robertoaflores/Gooey.git")
                    url.set("https://github.com/robertoaflores/Gooey/")
                }
                developers {
                    developer {
                        id.set("roberto.flores")
                        name.set("Roberto Flores")
                        email.set("roberto.flores@cnu.edu")
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            // Use snapshot or release repository based on version
            url = if (version.toString().endsWith("SNAPSHOT"))
                uri("https://oss.sonatype.org/content/repositories/snapshots/")
            else
                uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")

            credentials {
                username = project.findProperty("ossrhUsername") as String? ?: ""
                password = project.findProperty("ossrhPassword") as String? ?: ""
            }
        }
    }
}

// Configure signing for the publication artifacts
signing {
    sign(publishing.publications["mavenJava"])
}
